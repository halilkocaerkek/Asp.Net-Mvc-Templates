
// https://github.com/OmarElabd/RepositoryGenerator/blob/master/RepositoryGenerator.tt
<#@ template language="C#" debug="false" hostspecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ include file="T4Helper.ttinclude" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>  
<#@ import namespace="System.Reflection" #> 
<#  //Set these options                                                
    string targetNamespace = "DataModel";  
    string efContext = "ddsport"; //If Context is not in the same namespace rename this to the name of the context

    IServiceProvider serviceProvider = (IServiceProvider)this.Host;
    DTE dte = serviceProvider.GetService(typeof(DTE)) as DTE;  
    var project = GetActiveProject(dte);

    var classes = FindClasses(project, targetNamespace, ""); 
    var classWithDbContext = classes.FirstOrDefault(currentClass => currentClass.Bases.OfType<CodeElement>().Any(currentBase => currentBase.Name == "DbContext"));

    var classNames = classes
                    .Select(currentClass => currentClass.Name)
                    .ToList();

    if(classWithDbContext != null)
    {
        efContext = classWithDbContext.Name;  
        classNames.Remove(efContext);
    }

    GenerateRepositoryFromPoco(project, targetNamespace, classNames, efContext);
#>
using System;

public interface IUnitOfWork : IDisposable
{
    <#
    foreach(string className in classNames)
    {
        var properClassName = GetProperClassName(className);
        var repositoryInterfaceName = "I" + properClassName + "Repository";
    #>
<#= repositoryInterfaceName + " " + getPluralClassName(className) #> { get; }
    <#
    }
    #>
void SaveChanges();
}
<# CreateFile("IUnitofWork.cs"); #>
using System;
using System.Text;
using System.Data.Entity.Validation;
using <#= targetNamespace #>;

public class UnitOfWork : IUnitOfWork
{
    private <#= efContext #> _context;

    public UnitOfWork(<#= efContext #> context)
    {
        _context = context;
    }
	 
	//Delete this default constructor if using an IoC container
	public UnitOfWork()
	{
		_context = new <#= efContext #>();
	}
	
    <#foreach(string className in classNames)
    {
        var properClassName = GetProperClassName(className);
        var repositoryInterfaceName =  "I" + properClassName + "Repository";
    #>
public <#= repositoryInterfaceName + " " + getPluralClassName(className) #>
    {
        get { return new <#= properClassName + "Repository" #>(_context); }
    }

    <#}#>

    public void SaveChanges()
    {
        try
        {
            _context.SaveChanges( );
        }
        catch ( DbEntityValidationException ex )
        {
            StringBuilder sb = new StringBuilder(ex.Message);
            sb.AppendLine("");
            foreach(var validationError in ex.EntityValidationErrors )
            {
                sb.AppendFormat("{0} : {1}{2}" , validationError.Entry.Entity.ToString() , validationError.Entry.State, Environment.NewLine);
                foreach ( var error in validationError.ValidationErrors )
                {
                    sb.AppendFormat("{0} : {1}{2}" , error.PropertyName , error.ErrorMessage , Environment.NewLine);
                }
                sb.AppendLine("");

                try
                {
                    sb.AppendLine("Current Values:");
                    if ( validationError.Entry.CurrentValues != null )
                    {
                        foreach ( var propname in validationError.Entry.CurrentValues.PropertyNames )
                        {
                            sb.AppendFormat("{0} : {1}{2}" , propname , validationError.Entry.CurrentValues [ propname ] , Environment.NewLine);
                        }
                        sb.AppendLine("");
                    }
                }
                catch(Exception ex1)
                {
                    sb.AppendLine(ex1.Message);
                }

                try
                {
                    sb.AppendLine("Original Values:");
                    if ( validationError.Entry.OriginalValues != null )
                    {
                        foreach ( var propname in validationError.Entry.OriginalValues.PropertyNames )
                        {
                            sb.AppendFormat("{0} : {1}{2}" , propname , validationError.Entry.OriginalValues [ propname ] , Environment.NewLine);
                        }
                    }
                }
                catch(Exception ex2)
                {
                    sb.AppendLine(ex2.Message);
                }
            }
            sb.AppendLine("");
            throw new Exception(sb.ToString( ));
        }
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            if (_context != null)
            {
                _context.Dispose();
                _context = null;
            }
        }
    }
}
<# CreateFile("UnitofWork.cs"); #>
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using <#= targetNamespace #>;
 
public abstract class Repository<TEntity> : IRepository<TEntity> where TEntity : class
{
    private readonly DbSet<TEntity> _entities;

    protected Repository(<#= efContext #> context)
    {
        _entities = context.Set<TEntity>();
    }

	public bool isExists ( int id )
	{
		return Find(id) != null;
	}

    public IEnumerable<TEntity> GetAll()
    {
        return _entities.ToList();
    }

    public TEntity Find(int id)
    {
        return _entities.Find(id);
    }

	public TEntity Find(string id)
    {
        return _entities.Find( id);
    }

	public TEntity Find(int? id)
    {
        return _entities.Find(id.Value);
    }

    public virtual void Add(TEntity entity)
    {
        _entities.Add(entity); 
    }

    public void Remove(TEntity entity)
    {
        _entities.Remove(entity);
    }
}

<# CreateFile("Repository.cs"); #>
using System.Collections.Generic;

public interface IRepository<T> where T : class
{
	bool isExists ( int id );
    IEnumerable<T> GetAll();
    T Find(int id);
	T Find(int? id);
	T Find(string id);
    void Add(T entity);
    void Remove(T entity);
}
<# CreateFile("IRepository.cs"); #>
<#+
    public void GenerateRepositoryFromPoco(Project project, string targetNamespace, List<string> classNames, string efContext)
    {
        foreach(string className in classNames)
        {
            var properClassName = GetProperClassName(className);
            var repositoryName = properClassName + "Repository";
            #>    
using <#= targetNamespace #>;
              
public partial class <#= repositoryName #> : Repository<<#= className #>>, I<#= properClassName #>Repository
{
    private <#= efContext #> _context;

    public <#= repositoryName #>(<#= efContext #> context) : base(context)
    {
        _context = context;
    }

    //Override any generic method for your own custom implemention, add new repository methods to the I<#= repositoryName #>.cs file
}
<#+  CreateFile(repositoryName + ".cs"); #>
using <#= targetNamespace #>;

public partial interface I<#= properClassName #>Repository : IRepository<<#= className #>>
{
    //Add any additional repository methods other than the generic ones (GetAll, GetById, Delete, Add)
}
<#+ CreateFile(@"I" + repositoryName + ".cs"); #>
            <#+
        }
    }
#>